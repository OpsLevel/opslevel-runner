# https://taskfile.dev/

version: '3'

env:
  OPSLEVEL_GO_PKG: "github.com/opslevel/opslevel-go/v2024"
  SRC_DIR: "{{.TASKFILE_DIR}}/src"

tasks:
  ci:
    desc: Workflow to run in CI
    cmds:
      - task: workspace
      - task: has-latest-opslevel-go
      - task: install-gofumpt
      - task: install-golangci-lint
      - task: lint
      - task: test

  lint:
    desc: Formatting and linting
    dir: "{{.SRC_DIR}}"
    cmds:
      - test -z "$(gofumpt -d -e . | tee /dev/stderr)"
      - go vet ./...
      - golangci-lint run

  fix:
    desc: Fix formatting and linting
    dir: "{{.SRC_DIR}}"
    cmds:
      - task: update-opslevel-go
      - gofumpt -w .
      - go mod tidy
      - golangci-lint run --fix

  setup:
    desc: Setup linter, formatter, etc. for local testing and CI
    cmds:
      - cmd: echo "Installing development tools..."
        silent: true
      - task: install-changie
      - task: install-gofumpt
      - task: install-golangci-lint
      - cmd: echo "Development tools installed!"
        silent: true
      - task: workspace

  test:
    desc: Run tests
    dir: "{{.SRC_DIR}}"
    cmds:
      - go test -race -coverprofile=coverage.txt -covermode=atomic -v ./... {{ .CLI_ARGS }}
    silent: true

  update-opslevel-go:
    desc: Update opslevel-go version to latest release
    dir: "{{.SRC_DIR}}"
    cmds:
      - go get -u {{.OPSLEVEL_GO_PKG}}
      - go mod tidy

  workspace:
    desc: Setup workspace for cli & opslevel-go development
    dir: "{{.SRC_DIR}}"
    cmds:
      - cmd: echo "Setting up opslevel-go workspace..."
        silent: true
      - git submodule update --init --remote
      - go work init || exit 0
      - go work use . submodules/opslevel-go
      - cmd: echo "opslevel-go workspace ready!"
        silent: true

  has-latest-opslevel-go:
    desc: Check if latest release of opslevel-go in go.mod
    dir: "{{.SRC_DIR}}"
    silent: true
    vars:
      GO_WORK: "go.work"
      TMP_GO_WORK: "tmp_go.work"
      LATEST_OPSLEVEL_GO_VERSION:
        sh: go list -u -m -versions {{.OPSLEVEL_GO_PKG}} | awk '{print $NF}'
    cmds:
      - if [[ -f {{.GO_WORK}} ]]; then mv {{.GO_WORK}} {{.TMP_GO_WORK}}; fi
      - defer: if [[ -f {{.TMP_GO_WORK}} ]]; then mv {{.TMP_GO_WORK}} {{.GO_WORK}}; fi
      - |-
        if [[ {{.LATEST_OPSLEVEL_GO_VERSION}} == $(go list -m --json '{{.OPSLEVEL_GO_PKG}}' | jq -r '.Version') ]]; then
          echo "Using latest version of opslevel-go - {{.LATEST_OPSLEVEL_GO_VERSION}}";
        else
          echo "WARNING: current version of opslevel-go is behind '{{.LATEST_OPSLEVEL_GO_VERSION}}'"
          echo "Run 'task fix' to get latest version"
          exit 1
        fi

  start-faktory:
    desc: Start Faktory and opslevel-runner in faktory mode
    dir: "{{.SRC_DIR}}"
    deps:
      - install-goreman
      - install-faktory
    cmds:
      - goreman start

  # internal (not directly called) tasks

  install-changie:
    desc: go install "changie"
    internal: true
    status:
      - test -n "command -v changie"
    cmds:
      - go install "github.com/miniscruff/changie@latest"

  install-goreman:
    desc: go install "goreman"
    internal: true
    status:
      - test -n "command -v goreman"
    cmds:
      - go install "github.com/mattn/goreman@latest"

  install-faktory:
    desc: install "faktory"
    internal: true
    status:
      - test -n "command -v faktory"
    cmds:
      - mkdir -p ./faktory
      - curl -sL https://github.com/contribsys/faktory/releases/download/v1.8.0/faktory-ent_1.8.0.macos.$(go env GOARCH).tbz -o ./faktory/faktory-ent.osx.tbz
      - tar xjf ./faktory/faktory-ent.osx.tbz -C ./faktory
      - mv ./faktory/faktory /usr/local/bin
      - chmod +x /usr/local/bin/faktory
      - rm -rf ./faktory

  install-gofumpt:
    desc: go install "gofumpt"
    internal: true
    status:
      - test -n "command -v gofumpt"
    cmds:
      - go install "mvdan.cc/gofumpt@latest"

  install-golangci-lint:
    desc: go install "golangci-lint"
    internal: true
    status:
      - test -n "command -v golangci-lint"
    cmds:
      - go install "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
